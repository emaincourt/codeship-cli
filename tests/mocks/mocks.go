// Code generated by MockGen. DO NOT EDIT.
// Source: codeship.go

// Package mock_providers is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	codeship_go "github.com/codeship/codeship-go"
	gomock "github.com/golang/mock/gomock"
)

// MockCodeShipAPI is a mock of CodeShipAPI interface
type MockCodeShipAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeShipAPIMockRecorder
}

// MockCodeShipAPIMockRecorder is the mock recorder for MockCodeShipAPI
type MockCodeShipAPIMockRecorder struct {
	mock *MockCodeShipAPI
}

// NewMockCodeShipAPI creates a new mock instance
func NewMockCodeShipAPI(ctrl *gomock.Controller) *MockCodeShipAPI {
	mock := &MockCodeShipAPI{ctrl: ctrl}
	mock.recorder = &MockCodeShipAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeShipAPI) EXPECT() *MockCodeShipAPIMockRecorder {
	return m.recorder
}

// ListProjects mocks base method
func (m *MockCodeShipAPI) ListProjects(ctx context.Context, opts ...codeship_go.PaginationOption) (codeship_go.ProjectList, codeship_go.Response, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(codeship_go.ProjectList)
	ret1, _ := ret[1].(codeship_go.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockCodeShipAPIMockRecorder) ListProjects(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockCodeShipAPI)(nil).ListProjects), varargs...)
}

// ListBuilds mocks base method
func (m *MockCodeShipAPI) ListBuilds(ctx context.Context, projectUUID string, opts ...codeship_go.PaginationOption) (codeship_go.BuildList, codeship_go.Response, error) {
	varargs := []interface{}{ctx, projectUUID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuilds", varargs...)
	ret0, _ := ret[0].(codeship_go.BuildList)
	ret1, _ := ret[1].(codeship_go.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBuilds indicates an expected call of ListBuilds
func (mr *MockCodeShipAPIMockRecorder) ListBuilds(ctx, projectUUID interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, projectUUID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockCodeShipAPI)(nil).ListBuilds), varargs...)
}
